#!/usr/bin/env bash

function _echo() {
  echo -e "\033[1m\n${1}\n\033[0m";
  tput sgr0;
}

function _command_exists() {
  local COMMAND=${1};
  command -v "${COMMAND}" >/dev/null 2>&1  || return 1;
}

function _install_ansible_venv(){
  local ANSIBLE_CHECKOUT_PATH="./.ansible";
  local ANSIBLE_VENV="venv";
  export PYTHONPATH="${ANSIBLE_CHECKOUT_PATH}/lib"

  _echo "Installing Ansible on host";
  curl -L --silent "${ANSIBLE_INSTALLER_URI}" | bash -s -- \
    -d "${ANSIBLE_CHECKOUT_PATH}" \
    --venv "${ANSIBLE_VENV}" \
    --branch "${ANSIBLE_VERSION}" \
    --yolo

}

function _install_ansible_osx() {

  sudo easy_install pip 2> $ERROR_LOG;
  sudo pip install virtualenv 2> $ERROR_LOG;
  if $INSTALL_XCODE_CTL ; then
    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress ;
    softwareupdate -i -a 2> $ERROR_LOG;
  fi

  sudo pip install ansible 2> $ERROR_LOG;
}

function _install_ansible_linux() {
  local YUM_PACKAGE_NAME="python python-devl python-pip openssl-devel"
  local DEB_PACKAGE_NAME="python2.7 python-dev python-pip libssl-dev"

  easy_install pip;
  pip install virtualenv;
  pip install ansible;
  case _detect_linux_pm in
    yum*)
      echo "Installing required YUM packages $YUM_PACKAGE_NAME"
      yum install -y $YUM_PACKAGE_NAME
    ;;
    apt*)
      echo "Installing required DEB packages $DEB_PACKAGE_NAME"
      apt-get update
      apt-get install -y $DEB_PACKAGE_NAME
    ;;
    *)        echo "Unknow linux Distro $OSTYPE" ; exit 1;;
  esac
}

function _detect_linux_pm() {
 local DISTRO_LABEL=$(cat /etc/*release | grep ^NAME | tr -d 'NAME="')

 case "$DISTRO_LABEL" in
   CentOS* | Red* | Fedora*) return yum ;;
   Ubuntu* | Debian* | Mint* | Mint*) return apt ;;
   *)        echo "Unknow linux Distro $OSTYPE" ; exit 1;;
 esac

}

function _install_ansible() {
  case "$OSTYPE" in
    solaris*) echo "Ansible installation not available for OS TYPE $OSTYPE" ;;
    darwin*)  _install_ansible_osx ;;
    linux*)   _install_ansible_linux ;;
    bsd*)     echo "Ansible installation not available for OS TYPE $OSTYPE" ; exit 1;;
    msys*)    echo "Ansible installation not available for OS TYPE $OSTYPE" ; exit 1;;
    *)        echo "Ansible installation not available for OS TYPE $OSTYPE" ; exit 1;;
  esac
}


function _install_ansible_provision() {
  _echo "Installing Inviqa's Ansible Provisioning script from '${ANSIBLE_PROVISION_REPO}' into '${ANSIBLE_PROVISION_DIR}'";
  echo "PWD: $PWD"
  git clone --quiet "${ANSIBLE_PROVISION_REPO}" "${ANSIBLE_PROVISION_DIR}";
  chmod 755 "${ANSIBLE_PROVISION_DIR}/ansible-provision"
}

function _launch_ansible_provision() {
  _echo "Running Inviqa's Ansible Provisioning script from '${ANSIBLE_BASE_DIR}'";
  echo "PWD: $PWD"
  ${ANSIBLE_PROVISION_DIR}/ansible-provision -p ${ANSIBLE_BASE_DIR}/playbook.yml -l localhost -rpath ${ANSIBLE_BASE_DIR}/.galaxy
}

function _install_ansible_base() {
  _echo "Installing Inviqa's Ansible Base config from '${ANSIBLE_BASE_REPO}' into '${ANSIBLE_BASE_DIR}'";
  git clone --quiet "${ANSIBLE_BASE_REPO}" "${ANSIBLE_BASE_DIR}";
}


function _check_requirements(){
  EXCEPTION_CAUGHT=false
  if [[ "$OSTYPE" == darwin* ]]; then
      if ! _command_exists "easy_install"; then
        _echo "ERROR: Cannot find required tool \"easy_install\""
        EXCEPTION_CAUGHT=true
      fi
  fi
  if ! _command_exists "curl"; then
    _echo "ERROR: Cannot find required tool \"curl\""
    EXCEPTION_CAUGHT=true
  fi
  if ! _command_exists "git"; then
    _echo "WARNING: Cannot find required tool \"git\": some functionality might not work"
  fi
  if ! _command_exists "pip"; then
    _echo "WARNING: Cannot find required tool \"pip\": some functionality might not work"
  fi
  if $EXCEPTION_CAUGHT; then
    echo "Kickstart Aborted"
    exit 1
  fi
}


function _retrive_args() {
  ERROR_LOG="./error_log"
  INSTALL_ANSIBLE_BASE=false
  ANSIBLE_INSTALLER_URI="https://raw.githubusercontent.com/shrikeh/ansible-virtualenv/master/init.sh"
  ANSIBLE_PROVISION_REPO="https://github.com/inviqa/ansible-provision.git"
  ANSIBLE_PROVISION_DIR="./ansible-provision"
  ANSIBLE_BASE_REPO="https://github.com/inviqa/ansible-inviqa-base.git"
  ANSIBLE_BASE_DIR="./ansible"
  INSTALL_ANSIBLE_VENV=false
  ANSIBLE_VERSION="devel"
  ASK_BECOME_PASS=""
  INSTALL_XCODE_CTL=true
  ANSIBLE_PROVISION=true
  PROVISION_SCRIPT_DIR="$( dirname "$( which "$0" )" )"

  local -a ARGV=("${!1}");
  while [[ "${#}" > 0 ]]; do
    key="${1}";
    case $key in
      --skip-xcode-clt )
        INSTALL_XCODE_CTL=false;
      shift
      ;;
      --skip-provision )
        ANSIBLE_PROVISION=false;
      shift
      ;;
      --install-ansible-venv )
        INSTALL_ANSIBLE_VENV=true;
      shift
      ;;
      --ansible-version )
        ANSIBLE_VERSION="${2}";
      shift
      ;;
      --venv)
        INSTALL_ANSIBLE_VENV=true;
        ANSIBLE_VENV="${2}";
      shift
      ;;
      --ansible-provision-url)
        ANSIBLE_PROVISION_REPO="${2}";
      shift
      ;;
      --ansible-provision-directory)
        ANSIBLE_PROVISION_DIR="${2}";
      shift
      ;;
      --install-ansible-base)
        INSTALL_ANSIBLE_BASE=true;
      shift
      ;;
      --ansible-base-url)
        INSTALL_ANSIBLE_BASE=true;
        ANSIBLE_PROVISION_REPO="${2}";
      shift
      ;;
      --ansible-base-directory)
        INSTALL_ANSIBLE_BASE=true;
        ANSIBLE_PROVISION_DIR="${2}";
      shift
      ;;
      *)
              # unknown option
      ;;
  esac
    shift
  done

}

_retrive_args "${@}";
_check_requirements;

if [ $INSTALL_ANSIBLE_VENV = true ];then
  _install_ansible_venv;
else
  _install_ansible;
fi
_install_ansible_provision
_install_ansible_base

if $ANSIBLE_PROVISION;then
  _launch_ansible_provision;
fi
